use crate::ast::{Expr, Atom, BinOp, Types, SimpleType, SignalType};
use crate::lexer::LexicalError;
use crate::tokens::Token;

use num_bigint::BigInt;

grammar;

// The top layers

pub Expr: Box<Expr> = {
    LiftN LiftExpr => Box::new(Expr::Lift(<>)),
    LiftExpr
};

LiftExpr: Box<Expr> = {
    "\\" <Ident> ":" <Type> "." <Expr> => Box::new(Expr::Abs(<>)),
    "if" <AppExpr> "then" <Expr> "else" <Expr> => Box::new(Expr::If(<>)),
    "let" <Ident> "=" <Expr> "in" <Expr> => Box::new(Expr::Let(<>)),
    AppExpr
};


AppExpr: Box<Expr> = {
    AppExpr Term => Box::new(Expr::App(<>)),
    CompareOpExpr
};

// BinOps

// Defining a macro, so that it is easier to create precedence
Tier<Op, NextTier>: Box<Expr> = {
    Tier<Op, NextTier> Op NextTier => Box::new(Expr::BinOp(<>)),
    NextTier
};

CompareOpExpr = Tier<CompareOp, AddSubOpExpr>;
AddSubOpExpr = Tier<AddSubOp, MulDivOpExpr>;
MulDivOpExpr = Tier<MulDivOp, Term>;

CompareOp: BinOp = {
    "==" => BinOp::Eq,
    "!=" => BinOp::Ne,
    "<=" => BinOp::Le,
    ">=" => BinOp::Ge,
    "<" => BinOp::Less,
    ">" => BinOp::Greater,
};

AddSubOp: BinOp = {
    "+" => BinOp::Add,
    "-" => BinOp::Sub,
};

MulDivOp: BinOp = {
    "*" => BinOp::Mul,
    "/" => BinOp::Div,
};

// Bottom layers

Term: Box<Expr> = {
    Literal => Box::new(Expr::Const(<>)),
    Ident => Box::new(Expr::Const(<>)),
    "(" <Expr> ")"
};

// The most bottom layers

#[inline]
Type: Types = {
    SimType => Types::Simple(<>),
    SigType => Types::Signal(<>)
};

SimType: SimpleType = {
    <t1: SimType> "->" <t2: NextSimType> => SimpleType::Abs(Box::new(t1), Box::new(t2)),
    NextSimType,
};

NextSimType: SimpleType = {
    "unit" => SimpleType::Unit,
    "int" => SimpleType::Int,
    "(" <SimType> ")"
};

SigType: SignalType = {
    <t1: SimType> "->" <t2: NextSigType> => SignalType::Abs1(t1, Box::new(t2)),
    <t1: SigType> "->" <t2: NextSigType> => SignalType::Abs2(Box::new(t1), Box::new(t2)),
    NextSigType
};

NextSigType: SignalType = {
    "signal" <SimType> "." => SignalType::Signal(<>),
    "(" <SigType> ")"
};

Literal: Atom = {
    LitUnit => Atom::Unit,
    LitInt => Atom::Num(<>)
};

Ident: Atom = {
    Identifier => Atom::Var(<>)
};

// Hook external lexer:

extern {
    type Location = usize;
    type Error = LexicalError;

    enum Token {
        // Data
        Identifier => Token::Name(<String>),
        LitUnit => Token::LitUnit,
        LitInt => Token::LitInt(<BigInt>),

        // Keywords
        "if" => Token::If,
        "then" => Token::Then,
        "else" => Token::Else,
        "let" => Token::Let,
        "in" => Token::In,
        "unit" => Token::Unit,
        "int" => Token::Int,
        "signal" => Token::Signal,
        "foldp" => Token::Foldp,
        LiftN => Token::LiftN(<usize>),
        "async" => Token::Async,

        // Symbols
        "\\" => Token::BSlash,
        ":" => Token::Colon,
        "," => Token::Comma,
        "." => Token::Dot,
        "=" => Token::Eq,
        "->" => Token::LArrow,
        ">" => Token::Great,
        "<" => Token::Less,
        "==" => Token::EqEqual,
        ">=" => Token::Geq,
        "<=" => Token::Leq,
        "!=" => Token::Ne,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "*" => Token::Mul,
        "/" => Token::Div,

        // Delimiters
        "(" => Token::LParen,
        ")" => Token::RParen,
    }
}
